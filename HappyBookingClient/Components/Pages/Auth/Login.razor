@page "/login"
@using Blazored.LocalStorage
@using HappyBookingClient.Components.Layout
@using HappyBookingClient.Service.IService
@using HappyBookingShare.Common
@using HappyBookingShare.Request.Auth
@using HappyBookingShare.Request.User
@inject NavigationManager _navigation
@inject ILocalStorageService _localStorage
@inject IUserService _userService
@inject ILanguageService _languageService

<MudGrid Justify="Justify.Center">
    <MudItem md="6" sm="12" xs="12">
        <MudText Typo="Typo.h6">Login</MudText>
        <MudCard>
            @if (isShowAlert)
            {
                <MudAlert Severity="@severity" Variant="Variant.Filled" Dense="true" ShowCloseIcon="true" CloseIconClicked="@(() => isShowAlert = false)">@message</MudAlert>
            }
            <MudForm Model="@request" @ref="@form" ValidationDelay="0">
                <MudCardContent>
                    <MudTextField @bind-Value="request.UserName"
                                  Immediate="true"
                                  Label="User name"
                                  placeholder="Input email, phone or citizen identification number"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.DriveFileRenameOutline"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  Class="pt-0" />

                    <MudTextField @bind-Value="request.Password"
                                  Immediate="true"
                                  Class="mt-5"
                                  Label="Password"
                                  placeholder="Password"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  InputType="InputType.Password"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Password" />
                </MudCardContent>
            </MudForm>
            <MudCardActions Class="pt-0">
                <MudButton Variant="Variant.Filled" Class="mr-2" Size="Size.Small" Color="Color.Success" OnClick="@(async () => await LoginClick())">Login</MudButton>
                <MudButton Variant="Variant.Outlined" Size="Size.Small" Color="Color.Default" OnClick="@(() => _navigation.NavigateTo("/"))">Cancel</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

<LoadingComponent IsLoading="isLoading" />

@code {
    public LoginRequest request { get; set; } = new();
    private MudForm form;
    private bool isShowAlert = false;
    private Severity severity = Severity.Normal;
    private string message = string.Empty;
    private string returnUrl = string.Empty;
    private bool isLoading = false;

    protected override void OnInitialized()
    {
        var uri = new Uri(_navigation.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var value))
        {
            returnUrl = value.ToString();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _languageService.LoadLanguage();
            var token = await _userService.GetTokenFromLocalStorageAsync();
            if (!await _userService.IsTokenExpired())
            {
                _navigation.NavigateTo("/");
            }
            StateHasChanged();
        }
    }

    private async Task LoginClick()
    {
        isLoading = true;
        message = string.Empty;
        try
        {
            var response = await _userService.Login(request);
            if (response != null)
            {
                if (!string.IsNullOrEmpty(returnUrl))
                {
                    _navigation.NavigateTo(returnUrl);
                }
                else
                {
                    _navigation.NavigateTo("/");
                }
                StateHasChanged();
            }
            else
            {
                ShowAlert("Invalid username or password.", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowAlert(string message, Severity severity)
    {
        this.isShowAlert = true;
        this.severity = severity;
        this.message = message;
    }
}
