@page "/your-profile"
@using Blazored.LocalStorage
@using HappyBookingClient.Components.Layout
@using HappyBookingClient.Service.IService
@using HappyBookingShare.Common
@using HappyBookingShare.Request.Auth
@using HappyBookingShare.Request.User
@using HappyBookingShare.Response.Dtos
@inject IUserService _userService
@inject NavigationManager _navigation
@inject ILanguageService _languageService
@inject IUploadImageService _uploadImageService
@inject ILocalStorageService _localStorage
@inject IJSRuntime _jsRuntime

<MudBreadcrumbs Items="mudBreadcrumbs" Class="p-0 mb-3 mt-0"></MudBreadcrumbs>

<MudGrid Justify="Justify.Center">
    <MudItem md="3" sm="12" xs="12">
        <div class="avatar-upload">
            <span>@_languageService["ProfilePicture"]</span>

            <div class="avatar-edit">
                <InputFile id="imageUpload" OnChange="LoadFiles" />
                <label for="imageUpload"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> @_languageService["Edit"]</label>
            </div>
            <div class="avatar-preview">
                <div id="imagePreview" style="background-image: url('@requestModel.AvatarImage');"></div>
            </div>

        </div>
    </MudItem>
    <MudItem md="6" sm="12" xs="12">
        <MudText Typo="Typo.h6">@_languageService["YourProfile"]</MudText>
        <MudCard>
            @if (isShowAlert)
            {
                <MudAlert Severity="@severity" Variant="Variant.Filled" Dense="true" ShowCloseIcon="true" CloseIconClicked="@(() => isShowAlert = false)">@message</MudAlert>
            }
            <MudForm Model="@requestModel" @ref="@form" ValidationDelay="0">
                <MudCardContent>
                    <MudTextField @bind-Value="requestModel.FullName"
                                  Immediate="true"
                                  placeholder="@_languageService["FullName"]"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.DriveFileRenameOutline"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  RequiredError="@_languageService["RequiredError"]"
                                  Class="pt-0" />

                    <MudSelect Class="mt-2"
                               @bind-Value="requestModel.Role"
                               Variant="Variant.Outlined"
                               AdornmentIcon="@Icons.Material.Filled.ReduceCapacity"
                               Adornment="Adornment.Start"
                               AnchorOrigin="Origin.BottomLeft"
                               TransformOrigin="Origin.CenterCenter">
                        <MudSelectItem Value="@(UserRoleConstant.Manager)">
                            @_languageService["Role"]: @_languageService["Manager"]
                        </MudSelectItem>
                        <MudSelectItem Value="@(UserRoleConstant.Driver)">
                            @_languageService["Role"]: @_languageService["Driver"]
                        </MudSelectItem>
                        <MudSelectItem Value="@(UserRoleConstant.Staff)">
                            @_languageService["Role"]: @_languageService["Staff"]
                        </MudSelectItem>
                    </MudSelect>

                    <MudTextField @bind-Value="requestModel.Email"
                                  Immediate="true"
                                  placeholder="@_languageService["Email"]"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Email"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  RequiredError="@_languageService["RequiredError"]"
                                  InputType="InputType.Email"
                                  Class="mt-2" />

                    <MudTextField @bind-Value="requestModel.PhoneNumber"
                                  Immediate="true"
                                  placeholder="@_languageService["PhoneNumber"]"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.PhonelinkRing"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  RequiredError="@_languageService["RequiredError"]"
                                  InputType="InputType.Telephone"
                                  Class="mt-2" />

                    <MudTextField @bind-Value="requestModel.CitizenIdentificationNumber"
                                  Immediate="true"
                                  Required="true"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.RememberMe"
                                  Variant="Variant.Outlined"
                                  RequiredError="@_languageService["RequiredError"]"
                                  placeholder="@_languageService["CitizenIdentificationNumber"]"
                                  Class="mt-2" />

                    <MudTextField @bind-Value="requestModel.Address"
                                  Immediate="true"
                                  Required="true"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.AddLocationAlt"
                                  Variant="Variant.Outlined"
                                  RequiredError="@_languageService["RequiredError"]"
                                  placeholder="@_languageService["Address"]"
                                  Class="mt-2" />
                </MudCardContent>
            </MudForm>
            <MudCardActions Class="pt-0">
                <MudButton Variant="Variant.Filled" Class="mr-2" Size="Size.Small" Color="Color.Success" OnClick="@(async () => await SaveClick())">@_languageService["Save"]</MudButton>
                <MudButton Variant="Variant.Filled" Class="mr-2" Size="Size.Small" Color="Color.Tertiary" OnClick="@(async () => await GeneratePdf())">@_languageService["RenderPdf"]</MudButton>
                <MudButton Variant="Variant.Outlined" Size="Size.Small" Color="Color.Default" OnClick="@(() => _navigation.NavigateTo("/"))">@_languageService["Cancel"]</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

<LoadingComponent IsLoading="isLoading" />

@code {
    private List<BreadcrumbItem>? mudBreadcrumbs;
    private MudForm? form;
    private UpdateUserRequest requestModel = new();
    private bool isShowAlert = false;
    private Severity severity = Severity.Normal;
    private string message = string.Empty;
    private MemoryStream? memoryStream = null;
    private IBrowserFile? file = null;
    private long maxFileSize = 3 * 1024 * 1024; // 3 MB
    private long userId = 0;
    private bool isLoading = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            StateHasChanged();

            await _languageService.LoadLanguage();
            var userLogin = await _localStorage.GetItemAsync<UserDto>(KeyConstant.UserLogin) ?? new();
            userId = userLogin.UserId;
            if (userId > 0)
            {
                var userResponse = await _userService.GetUserByUserId(userId);
                if (userResponse == null || userResponse.Data.UserId == 0)
                {
                    return;
                }
                var userDto = userResponse.Data;
                requestModel.UserId = userDto.UserId;
                requestModel.FullName = userDto.FullName;
                requestModel.Email = userDto.Email;
                requestModel.PhoneNumber = userDto.PhoneNumber;
                requestModel.CitizenIdentificationNumber = userDto.CitizenIdentificationNumber;
                requestModel.Address = userDto.Address;
                requestModel.AvatarImage = userDto.AvatarImage;
                requestModel.Role = userDto.Role;
            }
            InitializeBreadcrumbs();

            isLoading = false;
            StateHasChanged();
        }
    }

    private void InitializeBreadcrumbs()
    {
        mudBreadcrumbs = new List<BreadcrumbItem>
        {
            new BreadcrumbItem(_languageService["Home"], href: "/", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem(_languageService["User"], href: "user-list", icon: Icons.Material.Filled.People),
            new BreadcrumbItem(_languageService["YourProfile"], href: "user-detail", icon: Icons.Material.Filled.PersonAddAlt1)
        };
    }

    private async Task LoadFiles(InputFileChangeEventArgs eventArg)
    {
        file = eventArg.File;

        if (file.Size > maxFileSize)
        {
            ShowAlert(_languageService["MaxImageSizeIs3MB"], Severity.Warning);
        }

        memoryStream = new MemoryStream();
        await file.OpenReadStream(maxFileSize).CopyToAsync(memoryStream);
        memoryStream.Seek(0, SeekOrigin.Begin); // Reset stream position

        var fileBytes = memoryStream.ToArray();

        // Create Blob URL for the file
        var fileUrl = await _jsRuntime.InvokeAsync<string>("createObjectURLFromArray", fileBytes);
        requestModel.AvatarImage = fileUrl;
    }

    private async Task UploadImageToServer()
    {
        if (file != null && memoryStream != null)
        {
            var formFile = new FormFile(memoryStream, 0, memoryStream.Length, file.Name, file.Name)
                {
                    Headers = new HeaderDictionary(),
                    ContentType = file.ContentType
                };

            var response = await _uploadImageService.UploadImageAsync(formFile);
            if (response != null)
            {
                requestModel.AvatarImage = response.Data;
            }
        }
    }

    private async Task SaveClick()
    {
        isLoading = true;
        try
        {
            isShowAlert = false;
            await form!.Validate();
            if (!form.IsValid)
            {
                return;
            }
            if (form.IsValid)
            {
                if (!Validator.IsValidEmail(requestModel.Email))
                {
                    ShowAlert(_languageService["InvalidEmail"], Severity.Warning);
                    requestModel.Email = string.Empty;
                    await form.Validate();
                    return;
                }
                if (!Validator.IsValidPhoneNumber(requestModel.PhoneNumber))
                {
                    ShowAlert(_languageService["InvalidPhoneNumber"], Severity.Warning);
                    requestModel.PhoneNumber = string.Empty;
                    await form.Validate();
                    return;
                }
                await UploadImageToServer();
                var result = await _userService.UpdateUser(requestModel);
                if (result == null || !result.Data)
                {
                    ShowAlert(result?.Message ?? string.Empty, Severity.Warning);
                    return;
                }
                var userResponse = await _userService.GetUserByUserId(userId);
                await _localStorage.SetItemAsync(KeyConstant.UserLogin, userResponse?.Data);
                ShowAlert(result?.Message ?? string.Empty, Severity.Success);
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task GeneratePdf()
    {
        var userResponse = await _userService.GetUserByUserId(userId);
        var userDto = userResponse?.Data;
        if (userDto == null)
        {
            return;
        }
        var data = new
        {
            userName = userDto.FullName,
            userEmail = userDto.Email,
            userPhone = userDto.PhoneNumber,
            citizenId = userDto.CitizenIdentificationNumber,
            address = userDto.Address,
            avatarUrl = userDto.AvatarImage
        };
        await _jsRuntime.InvokeVoidAsync("jsPDFHelper.previewPDF", data, "UserInfo.pdf");
    }

    private void ShowAlert(string message, Severity severity)
    {
        this.isShowAlert = true;
        this.severity = severity;
        this.message = message;
    }
}