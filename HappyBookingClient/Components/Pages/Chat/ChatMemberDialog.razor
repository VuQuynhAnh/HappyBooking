@using Blazored.LocalStorage
@using HappyBookingClient.Components.Layout
@using HappyBookingClient.Components.Pages.CommonDialog
@using HappyBookingClient.Service.IService
@using HappyBookingShare.Common
@using HappyBookingShare.Request.Chat
@using HappyBookingShare.Request.Chat.RequestItem
@using HappyBookingShare.Request.User
@using HappyBookingShare.Response.Dtos
@inject ILanguageService _languageService
@inject IUserService _userService
@inject IChatService _chatService
@inject ILocalStorageService _localStorage
@inject IDialogService _dialogService

<style>
    .addNewChatDialog {
        width: 410px;
    }

        .addNewChatDialog .mud-dialog-content {
            height: 470px;
        }

        .addNewChatDialog .mud-table-root .mud-table-head {
            display: none;
        }

        .addNewChatDialog .mud-table {
            border-radius: 0;
        }

        .addNewChatDialog .mud-elevation-1 {
            box-shadow: none;
        }

        .addNewChatDialog .mud-table-cell {
            padding: 1px 0 0 5px;
            border: none;
        }

        .addNewChatDialog .userSelectedList {
            max-height: 200px;
            overflow-y: auto;
        }

        .addNewChatDialog .userFilterList {
            height: 200px;
            overflow-y: auto;
        }

        .addNewChatDialog .userSelectedList .userSelectedItem {
            width: 100%;
            height: fit-content;
            padding: 2px 0;
            display: flex;
            align-items: center;
            border-bottom: 1px solid #f2f2f2;
        }

            .addNewChatDialog .userSelectedList .userSelectedItem .userSelectedAvatar {
                width: 40px;
                margin-right: 5px;
                float: left;
            }

            .addNewChatDialog .userSelectedList .userSelectedItem .userSelectedName {
                width: calc(100% - 15px - 45px - 50px);
                float: left;
            }

            .addNewChatDialog .userSelectedList .userSelectedItem select {
                width: fit-content;
                -webkit-appearance: none; /* Remove default arrow */
                -moz-appearance: none; /* Remove Firefox default arrow */
                appearance: none; /* Remove default arrow */
                background-image: none; /* Remove the arrow icon background */
            }

                .addNewChatDialog .userSelectedList .userSelectedItem select::-ms-expand {
                    display: none; /* Remove the arrow in IE */
                }

            .addNewChatDialog .userSelectedList .userSelectedItem .userSelectedButton {
                float: right;
            }

            .addNewChatDialog .userSelectedList .userSelectedItem .mud-button-text-size-large {
                padding: 14px 14px 14px 0;
            }

            .addNewChatDialog .userSelectedList .userSelectedItem .mud-button {
                min-width: 20px;
            }

        .addNewChatDialog .userFilterList .mud-icon-root.mud-svg-icon {
            position: absolute;
            right: 10px;
            top: 20px;
        }

        .addNewChatDialog .userFilterList .mud-button-root {
            background: #ffffe6;
            border-radius: 0;
            border-bottom: 1px solid #f2f2f2;
        }

            .addNewChatDialog .userFilterList .mud-button-root:hover {
                background: #ffffcc;
            }

        .addNewChatDialog .mud-button-text-size-large {
            padding: 14px 0px;
        }
</style>
<MudDialog Class="addNewChatDialog">
    <DialogContent>
        <MudTextField @bind-Value="memberSearchKeyWord"
                      Placeholder="@_languageService["Search"]"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      DebounceInterval="850"
                      OnKeyUp="@KeyUpAction"
                      FullWidth
                      OnDebounceIntervalElapsed="SearchAction"
                      Class="searchBoxStyle my-2" />

        <div class="userFilterList">
            @foreach (var userItem in userFilterList)
            {
                <MudButton Class="textLeftButton" OnClick="(() => AddUserToGroupChat(userItem))" FullWidth EndIcon="@Icons.Material.Filled.Add">
                    <MudBadge Color="userItem.IsOnline ? Color.Success : Color.Error"
                              Overlap="true"
                              Bordered="true"
                              Class="mr-2 float-start">
                        <MudAvatar>
                            <MudImage Src="@userItem.AvatarImage"></MudImage>
                        </MudAvatar>
                    </MudBadge>

                    <div class="float-end text-start">
                        <MudText Typo="Typo.subtitle1">@userItem.FullName</MudText>
                        <MudText Typo="Typo.subtitle2">@userItem.PhoneNumber</MudText>
                    </div>
                </MudButton>
            }
        </div>
        <MudDivider Class="my-2" />

        <div class="userSelectedList">
            @foreach (var chatMember in chatMemberSelectedList)
            {
                @if (chatMember.IsDeleted == 0)
                {
                    <div class="userSelectedItem">
                        <MudBadge Class="userSelectedAvatar"
                                  Color="chatMember.UserInformation.IsOnline ? Color.Success : Color.Error" Overlap="true" Bordered="true">
                            <MudAvatar>
                                <MudImage Src="@chatMember.UserInformation.AvatarImage" />
                            </MudAvatar>
                        </MudBadge>
                        <div class="userSelectedName">
                            <MudText Typo="Typo.subtitle1">@chatMember.UserInformation.FullName</MudText>
                            <MudText Typo="Typo.subtitle2">@chatMember.UserInformation.PhoneNumber</MudText>
                        </div>
                        @if (chatMember.MemberId != userLogin.UserId)
                        {
                            <select @onchange="(e) => UpdateChatRole(chatMember, e)">
                                <option value="@ChatRoleConstant.Member">@_languageService["Member"]</option>
                                <option value="@ChatRoleConstant.Manager">@_languageService["Manager"]</option>
                                <option value="@ChatRoleConstant.ViewOnly">@_languageService["ViewOnly"]</option>
                            </select>
                            <div class="userSelectedButton">
                                <MudButton Size="@Size.Large"
                                           FullWidth
                                           Variant="@Variant.Text"
                                           Color="@Color.Error"
                                           EndIcon="@Icons.Material.Outlined.Cancel"
                                           OnClick="(() => RemoveUserToGroupChat(chatMember))" />
                            </div>
                        }
                        else
                        {
                            <span>@_languageService["Manager"]</span>
                        }
                    </div>
                }
            }
        </div>

    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined"
                   Class="mt-2"
                   Size="Size.Small"
                   Color="Color.Default"
                   OnClick="Cancel">@_languageService["Cancel"]</MudButton>
        @if (IsAddNew)
        {
            <MudButton Variant="Variant.Filled"
                       Class="mr-4 mt-2"
                       Size="Size.Small"
                       Color="Color.Success"
                       OnClick="StartNewChat">
                @_languageService["StartChat"]
            </MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Filled"
                       Class="mr-4 mt-2"
                       Size="Size.Small"
                       Color="Color.Success"
                       OnClick="Continue">
                @_languageService["Continue"]
            </MudButton>
        }
    </DialogActions>
</MudDialog>

<LoadingComponent IsLoading="isLoading" />

@code {
    [CascadingParameter]
    private MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public bool IsAddNew { get; set; } = false;

    [Parameter]
    public ChatDto ChatDto { get; set; } = new();

    private string memberSearchKeyWord = string.Empty;
    private List<ChatMemberRequestInputTable> chatMemberSelectedList = new();
    private List<UserDto> userFilterList = new();
    private UserDto userLogin = new();
    private bool isLoading = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _languageService.LoadLanguage();
            userLogin = await _localStorage.GetItemAsync<UserDto>(KeyConstant.UserLogin) ?? new();
            chatMemberSelectedList.Add(new ChatMemberRequestInputTable(userLogin.UserId, ChatRoleConstant.Manager, userLogin));
            if (ChatDto.ChatId > 0)
            {
                chatMemberSelectedList.AddRange(ChatDto.ChatMemberList.Where(item => item.MemberId != userLogin.UserId).Select(item => new ChatMemberRequestInputTable(item.MemberId, item.ChatRole, item.UserInformation)));
            }
            StateHasChanged();
        }
    }

    private void UpdateChatRole(ChatMemberRequestInputTable chatMember, ChangeEventArgs e)
    {
        if (int.TryParse(e?.Value?.ToString(), out var newRole))
        {
            chatMember.ChatRole = newRole;
        }
    }

    private async Task KeyUpAction(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchAction("");
        }
    }

    private async Task SearchAction(string debouncedText)
    {
        if (!string.IsNullOrEmpty(memberSearchKeyWord))
        {
            GetListUserRequest request = new()
                {
                    KeyWord = memberSearchKeyWord,
                    PageIndex = 1,
                    PageSize = 15,
                };
            var resposeSearch = await _userService.GetAllUserData(request);
            userFilterList.Clear();
            userFilterList = (resposeSearch?.Data ?? new())
                             .Where(item => !chatMemberSelectedList.Where(item => item.IsDeleted == 0).Select(selected => selected.MemberId).Contains(item.UserId)
                                            && userLogin.UserId != item.UserId)
                             .ToList();
        }
    }

    private void Cancel() => MudDialog?.Cancel();

    private async Task StartNewChat()
    {
        if (!chatMemberSelectedList.Any())
        {
            return;
        }
        try
        {
            isLoading = true;
            var groupName = userLogin.FullName + "-" + string.Join("-", chatMemberSelectedList.Select(item => item.UserInformation.FullName));
            if (chatMemberSelectedList.Count(item => item.IsDeleted == 0) > 2)
            {
                var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };

                var dialogResult = await _dialogService.ShowAsync<AddGroupNameDialog>(@_languageService["GroupName"], options);
                var result = await dialogResult.Result;

                if (result.Canceled)
                {
                    return;
                }
                groupName = (string)(result.Data);

            }
            var memberItemList = chatMemberSelectedList.Select(item => new ChatMemberRequestItem(item.MemberId, item.ChatRole, 0)).ToList();

            SaveChatGroupRequest saveChatGroupRequest = new()
                {
                    ChatId = 0,
                    ChatName = groupName,
                    AvatarUrl = string.Empty,
                    IsGroup = memberItemList.Count > 2,
                    ChatMemberList = memberItemList
                };
            var saveChatResponse = await _chatService.SaveChatGroupAsync(saveChatGroupRequest);
            MudDialog?.Close(DialogResult.Ok(saveChatResponse?.Data.ChatId ?? 0));
        }
        finally
        {
            isLoading = false;
        }
    }

    private void Continue()
    {
        var memberItemList = chatMemberSelectedList.Select(item => new ChatMemberRequestItem(item.MemberId, item.ChatRole, item.IsDeleted)).ToList();
        MudDialog?.Close(DialogResult.Ok(memberItemList));
    }

    private void AddUserToGroupChat(UserDto userDto)
    {
        var chatMemberExist = chatMemberSelectedList.FirstOrDefault(item => item.MemberId == userDto.UserId);
        if (chatMemberExist != null)
        {
            if (IsAddNew)
            {
                return;
            }
            if (chatMemberExist.IsDeleted == 1)
            {
                chatMemberExist.IsDeleted = 0;
            }
        }
        else
        {
            chatMemberSelectedList.Add(new ChatMemberRequestInputTable(userDto.UserId, ChatRoleConstant.Manager, userDto));
        }
        userFilterList = userFilterList.Where(item => !chatMemberSelectedList.Where(item => item.IsDeleted == 0).Select(item => item.MemberId).Contains(item.UserId)).ToList();
        StateHasChanged();
    }

    private async Task RemoveUserToGroupChat(ChatMemberRequestInputTable member)
    {
        if (chatMemberSelectedList.Any(item => item.MemberId == member.MemberId))
        {
            if (IsAddNew)
            {
                chatMemberSelectedList.Remove(member);
            }
            else
            {
                member.IsDeleted = 1;
            }
            await SearchAction("");
            StateHasChanged();
        }
    }
}