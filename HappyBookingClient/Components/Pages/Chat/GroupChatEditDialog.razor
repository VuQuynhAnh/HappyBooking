@using Blazored.LocalStorage
@using HappyBookingClient.Components.Layout
@using HappyBookingClient.Components.Pages.CommonDialog
@using HappyBookingClient.Service.IService
@using HappyBookingShare.Request.Chat
@using HappyBookingShare.Request.Chat.RequestItem
@using HappyBookingShare.Response.Dtos
@inject ILanguageService _languageService
@inject IChatService _chatService
@inject IDialogService _dialogService
@inject ILocalStorageService _localStorage
@inject IJSRuntime _jSRuntime
@inject NavigationManager _navigation
@inject IConfiguration _configuration
@inject IUploadImageService _uploadImageService
@inject IJSRuntime _jsRuntime

<style>
    .groupChatEditDialog {
        width: 370px;
    }
</style>

<MudDialog Class="groupChatEditDialog">
    <DialogContent>
        <MudForm Model="@request" @ref="@form" ValidationDelay="0">
            <MudCardContent>
                <InputFile id="chatAvatarUrlImage" hidden OnChange="UploadFiles" accept="image/*" />
                <MudButton FullWidth OnClick="(await => AddFile())">
                    <MudAvatar Style="height:175px; width:175px;" Color="Color.Primary">
                        <MudImage Src="@request.AvatarUrl"></MudImage>
                    </MudAvatar>
                </MudButton>
                <MudTextField @bind-Value="request.ChatName"
                              Immediate="true"
                              Label="@_languageService["ChatName"]"
                              Adornment="Adornment.Start"
                              Variant="Variant.Outlined"
                              Required="true"
                              Class="pt-0 mt-2" />
            </MudCardContent>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled"
                   Size="Size.Small"
                   Color="Color.Success"
                   OnClick="(await => Submit())">@_languageService["Save"]</MudButton>
        <MudButton Variant="Variant.Outlined"
                   Class="mr-4"
                   Size="Size.Small"
                   Color="Color.Default"
                   OnClick="Cancel">@_languageService["Cancel"]</MudButton>
    </DialogActions>
</MudDialog>

<LoadingComponent IsLoading="isLoading" />
@code {
    [CascadingParameter]
    private MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public ChatDto ChatDto { get; set; } = new();
    private SaveChatGroupRequest request = new();
    private MudForm? form;
    private MemoryStream? memoryStream = null;
    private IBrowserFile? file = null;
    private long maxFileSize = 3 * 1024 * 1024; // 3 MB
    private bool isLoading = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _languageService.LoadLanguage();
            request.ChatId = ChatDto.ChatId;
            request.ChatName = ChatDto.ChatName;
            request.AvatarUrl = ChatDto.GroupAvatar;
            request.IsGroup = ChatDto.IsGroupChat;
            request.ChatMemberList = ChatDto.ChatMemberList.Select(item => new ChatMemberRequestItem(item.MemberId, item.ChatRole)).ToList();
            StateHasChanged();
        }
    }

    private async Task AddFile()
    {
        await _jSRuntime.InvokeVoidAsync("openFileDialog", "chatAvatarUrlImage");
        StateHasChanged();
    }

    private async Task UploadFiles(InputFileChangeEventArgs eventArg)
    {
        file = eventArg.File;

        if (file.Size > maxFileSize)
        {
            var parameters = new DialogParameters<MessageDialog>
                {
                    { x => x.ContentText, @_languageService["MaxImageSizeIs3MB"] },
                    { x => x.ButtonText, "Ok" },
                    { x => x.Color, Color.Warning }
                };

            var resultDialog = await _dialogService.ShowAsync<MessageDialog>(@_languageService["Warning"], parameters);
            return;
        }

        memoryStream = new MemoryStream();
        await file.OpenReadStream(maxFileSize).CopyToAsync(memoryStream);
        memoryStream.Seek(0, SeekOrigin.Begin); // Reset stream position

        var fileBytes = memoryStream.ToArray();

        // Create Blob URL for the file
        var fileUrl = await _jsRuntime.InvokeAsync<string>("createObjectURLFromArray", fileBytes);
        request.AvatarUrl = fileUrl;
        StateHasChanged();
    }

    private async Task UploadFileToServer()
    {
        if (file != null && memoryStream != null)
        {
            var formFile = new FormFile(memoryStream, 0, memoryStream.Length, file.Name, file.Name)
                {
                    Headers = new HeaderDictionary(),
                    ContentType = file.ContentType
                };

            var response = await _uploadImageService.UploadImageWithoutAuthorizeAsync(formFile);
            if (response != null)
            {
                request.AvatarUrl = response.Data;
            }
        }
    }

    private void Cancel() => MudDialog?.Cancel();

    private async Task Submit()
    {
        isLoading = true;
        StateHasChanged();

        await UploadFileToServer();
        var resultChat = await _chatService.SaveChatGroupAsync(request);
        MudDialog?.Close(DialogResult.Ok(resultChat?.Data));

        isLoading = false;
        StateHasChanged();
    }
}
