@page "/"
@using Blazored.LocalStorage
@using HappyBookingClient.Components.Layout
@using HappyBookingClient.Components.Pages.Chat
@using HappyBookingClient.Service.IService
@using HappyBookingShare.Common
@using HappyBookingShare.Request.Chat
@using HappyBookingShare.Response.Dtos
@inject ILanguageService _languageService
@inject IChatService _chatService
@inject IDialogService _dialogService
@inject ILocalStorageService _localStorage
<style>
    .textLeftButton {
        justify-content: left;
    }

    .searchBoxStyle .mud-input > input.mud-input-root-outlined {
        padding: 13.5px 14px;
    }
</style>

<MudGrid Justify="Justify.Center">
    <MudItem md="4" sm="12" xs="12" Class="mt-2">
        <MudButton Size="Size.Large"
                   Class="mb-2"
                   Variant="Variant.Outlined"
                   EndIcon="@Icons.Material.Filled.ChatBubbleOutline"
                   Color="Color.Default"
                   FullWidth
                   OnClick="OpenAddNewChatDialog">
            @_languageService["NewChat"]
        </MudButton>

        <MudPaper Class="pa-4">
            <MudStack Spacing="1">
                <MudButton Class="textLeftButton" OnClick="(() => OnExpandCollapseClick(0))">@_languageService["DirectMessages"]</MudButton>
                <MudDivider />
                <MudCollapse Expanded="expandedDirectMessages">

                    @foreach (var chatItem in singleChatList)
                    {
                        <MudButton Class="textLeftButton" OnClick="(() => LoadChatMessage(chatItem.ChatId, 1))" FullWidth>
                            <MudBadge Color="chatItem.Member1vs1Display.UserInformation.IsOnline ? Color.Success : Color.Error"
                                      Overlap="true"
                                      Bordered="true"
                                      Class="mr-3 float-start">
                                <MudAvatar>
                                    <MudImage Src="@chatItem.Member1vs1Display.UserInformation.AvatarImage"></MudImage>
                                </MudAvatar>
                            </MudBadge>

                            <div class="float-end text-start">
                                <MudText Typo="Typo.subtitle1">@chatItem.Member1vs1Display.UserInformation.FullName</MudText>
                                <MudText Typo="Typo.subtitle2">@chatItem.LastChatTime.ToString("dd/MM/yyyy HH:mm:ss")</MudText>
                            </div>
                        </MudButton>
                    }

                </MudCollapse>
            </MudStack>
        </MudPaper>

        <MudPaper Class="pa-4 mt-2">
            <MudStack Spacing="1">
                <MudButton Class="textLeftButton" OnClick="(() => OnExpandCollapseClick(1))">@_languageService["Spaces"]</MudButton>
                <MudDivider />
                <MudCollapse Expanded="expandedSpaces">

                    @foreach (var chatItem in groupChatList)
                    {
                        <MudButton Class="textLeftButton" OnClick="(() => LoadChatMessage(chatItem.ChatId, 1))" FullWidth>
                            <MudAvatar Class="mr-3 float-start">
                                <MudImage Src="@chatItem.GroupAvatar"></MudImage>
                            </MudAvatar>
                            <div class="float-end text-start">
                                <MudText Typo="Typo.subtitle1">@chatItem.ChatName</MudText>
                                <MudText Typo="Typo.subtitle2">@chatItem.LastChatTime.ToString("dd/MM/yyyy HH:mm:ss")</MudText>
                            </div>
                        </MudButton>
                    }

                </MudCollapse>
            </MudStack>
        </MudPaper>
    </MudItem>

    <MudItem md="8" sm="12" xs="12">
        <MudTextField @bind-Value="messageSearchKeyWord"
                      Placeholder="@_languageService["Search"]"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      Class="searchBoxStyle" />

    </MudItem>


</MudGrid>

<LoadingComponent IsLoading="isLoading" />

@code {
    private bool isLoading = false;
    bool expandedDirectMessages = true;
    bool expandedSpaces = true;
    private UserDto userLogin = new();
    string messageSearchKeyWord = string.Empty;
    bool onlineStatus = false;
    List<ChatDto> groupChatList = new();
    List<ChatDto> singleChatList = new();
    List<MessageDto> messageList = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            StateHasChanged();

            await _languageService.LoadLanguage();
            userLogin = await _localStorage.GetItemAsync<UserDto>(KeyConstant.UserLogin) ?? new();
            await LoadSingleChatList(1);
            StateHasChanged();

            await LoadGroupChatList(1);

            isLoading = false;
            StateHasChanged();
        }
    }


    private void OnExpandCollapseClick(int typeCollapse)
    {
        switch (typeCollapse)
        {
            case 0:
                expandedDirectMessages = !expandedDirectMessages;
                break;
            case 1:
                expandedSpaces = !expandedSpaces;
                break;
        }
    }

    private async Task OpenAddNewChatDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };
        var dialog = await _dialogService.ShowAsync<AddNewChatDialog>(_languageService["NewChat"], options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var chatId = (long)(result.Data);
            if (chatId == 0)
            {
                return;
            }
            await LoadSingleChatList(1);
            StateHasChanged();

            await LoadGroupChatList(1);
            StateHasChanged();
        }
    }

    private async Task LoadGroupChatList(int pageIndex)
    {
        GetListChatGroupByMemberRequest request = new();
        request.PageIndex = pageIndex;
        request.PageSize = 10;
        request.IsGroupChat = true;
        request.MemberId = userLogin.UserId;
        var response = await _chatService.GetListChatGroupByMemberAsync(request);
        groupChatList = response?.Data ?? new();
        StateHasChanged();
    }

    private async Task LoadSingleChatList(int pageIndex)
    {
        GetListChatGroupByMemberRequest request = new();
        request.PageIndex = pageIndex;
        request.PageSize = 10;
        request.IsGroupChat = false;
        request.MemberId = userLogin.UserId;
        var response = await _chatService.GetListChatGroupByMemberAsync(request);
        singleChatList = response?.Data ?? new();
        foreach (var item in singleChatList)
        {
            item.Set1vs1Member(userLogin.UserId);
        }
        StateHasChanged();
    }

    private async Task LoadChatMessage(long chatId, int pageIndex)
    {
        GetMessageListRequest request = new();
        request.PageIndex = pageIndex;
        request.PageSize = 10;
        request.ChatId = chatId;
        request.KeyWord = messageSearchKeyWord;
        var response = await _chatService.GetMessageListAsync(request);
        messageList = response?.Data ?? new();
    }
}