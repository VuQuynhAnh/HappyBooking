@page "/"
@using Blazored.LocalStorage
@using HappyBookingClient.Components.Layout
@using HappyBookingClient.Components.Pages.Chat
@using HappyBookingClient.Components.Pages.CommonDialog
@using HappyBookingClient.Service.IService
@using HappyBookingShare.Common
@using HappyBookingShare.Model
@using HappyBookingShare.Request.Chat
@using HappyBookingShare.Response.Dtos
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using System.Globalization
@using MudBlazor
@inject ILanguageService _languageService
@inject IChatService _chatService
@inject IDialogService _dialogService
@inject ILocalStorageService _localStorage
@inject IJSRuntime _jSRuntime
@inject NavigationManager _navigation
@inject IConfiguration _configuration
@inject IUploadImageService _uploadImageService
@inject IJSRuntime _jsRuntime

<style>
    .textLeftButton {
        justify-content: left;
    }

    .searchBoxStyle .mud-input > input.mud-input-root-outlined {
        padding: 13.5px 14px;
    }

    .chatSelected {
        background: #ccffcc;
    }

    .chatButton {
        border-radius: 0;
    }

        .chatButton:hover {
            background: #e6ffe6;
        }

    .mud-avatar.mud-avatar-medium {
        font-size: 15px;
    }

    .chatGroupItemStyle {
        padding: 0;
        width: calc(100% - 10px);
    }

    .moreChatButton {
        margin-top: 8px;
        border-radius: 0;
        padding: 0;
        height: 60px;
    }
</style>

<MudGrid Justify="Justify.Center">
    <MudItem md="4" sm="12" xs="12" Class="mt-2">
        <MudButton Size="Size.Large"
                   Class="mb-2"
                   Variant="Variant.Outlined"
                   EndIcon="@Icons.Material.Filled.ChatBubbleOutline"
                   Color="Color.Default"
                   FullWidth
                   OnClick="OpenAddNewChatDialog">
            @_languageService["NewChat"]
        </MudButton>

        <MudPaper Class="pa-4">
            <MudButton FullWidth Class="textLeftButton" Color="Color.Success">@_languageService["DirectMessages"]</MudButton>
            <MudDivider />

            <div @ref="scrollSingleChatContainer" style="overflow-y: auto;" @onscroll="OnSingleChatScroll">
                @foreach (var chatItem in singleChatList)
                {
                    <MudCard Class="@($"chatButton {(selectedChatId == chatItem.ChatId ? "chatSelected" : "")}")">
                        <MudCardHeader Class="chatGroupItemStyle">
                            <CardHeaderContent>
                                <MudButton Class="textLeftButton chatButton"
                                           OnClick="(await => ChatGroupClick(chatItem))"
                                           FullWidth>
                                    <MudBadge Color="chatItem.Member1vs1Display.UserInformation.IsOnline ? Color.Success : Color.Error"
                                              Overlap="true"
                                              Bordered="true"
                                              Class="mr-3 float-start">
                                        <MudAvatar>
                                            <MudImage Src="@chatItem.Member1vs1Display.UserInformation.AvatarImage"></MudImage>
                                        </MudAvatar>
                                    </MudBadge>
                                    <div class="float-end text-start">
                                        <MudText Typo="Typo.subtitle1" Class="text-truncate">@chatItem.Member1vs1Display.UserInformation.FullName</MudText>
                                        <MudText Typo="Typo.subtitle2">@chatItem.LastChatTime.ToString("dd/MM/yyyy HH:mm:ss")</MudText>
                                    </div>
                                </MudButton>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.MoreVert"
                                               Color="Color.Default"
                                               Class="moreChatButton" />
                            </CardHeaderActions>
                        </MudCardHeader>
                    </MudCard>
                }
            </div>
        </MudPaper>

        <MudPaper Class="pa-4 mt-2">
            <MudButton FullWidth Class="textLeftButton" Color="Color.Success">@_languageService["Spaces"]</MudButton>
            <MudDivider />
            @if (hoverChatGroup.ChatId > 0)
            {
                <div class="toolTipGroupChat">
                    <MudCard>
                        <MudCardHeader Class="px-2">
                            <CardHeaderAvatar>
                                <MudAvatar Class="float-start">
                                    <MudImage Src="@hoverChatGroup.GroupAvatar"></MudImage>
                                </MudAvatar>
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <div class="text-start">
                                    <b class="font-size-16">@hoverChatGroup.ChatName</b> <small><i>(@hoverChatGroup.ChatMemberList.Count @_languageService["Members"])</i></small>
                                </div>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent Class="pt-0">
                            <MudGrid Spacing="1">
                                @foreach (var memberItem in hoverChatGroup.ChatMemberList.Take(5))
                                {
                                    <MudItem xs="6">
                                        <MudBadge Color="memberItem.UserInformation.IsOnline ? Color.Success : Color.Error"
                                                  Overlap="true"
                                                  Bordered="true"
                                                  Class="mr-1 float-start">
                                            <MudAvatar Size="Size.Small">
                                                <MudImage Src="@memberItem.UserInformation.AvatarImage"></MudImage>
                                            </MudAvatar>
                                        </MudBadge>
                                        <div class="float-end text-start">
                                            <div class="mt-1 small-text-truncate">@memberItem.UserInformation.FullName</div>
                                        </div>
                                    </MudItem>
                                }
                                @if (hoverChatGroup.ChatMemberList.Count - 5 > 0)
                                {
                                    <MudItem xs="6" Class="d-flex align-center">
                                        <MudText Color="Color.Primary">+ @(hoverChatGroup.ChatMemberList.Count - 5) @_languageService["Members"]</MudText>
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </div>
            }

            <div @ref="scrollGroupChatContainer" style="overflow-y: auto;" @onscroll="OnGroupChatScroll">
                @foreach (var chatItem in groupChatList)
                {
                    <MudCard Class="@($"chatButton {(selectedChatId == chatItem.ChatId ? "chatSelected" : "")}")">
                        <MudCardHeader Class="chatGroupItemStyle">
                            <CardHeaderContent>
                                <MudButton Class="textLeftButton chatButton"
                                           OnClick="(await => ChatGroupClick(chatItem))"
                                           @onmouseover="await => ChatGroupHover(chatItem)"
                                           @onmouseout="() => hoverChatGroup = new()"
                                           FullWidth>
                                    <MudAvatar Class="mr-3 float-start">
                                        <MudImage Src="@chatItem.GroupAvatar"></MudImage>
                                    </MudAvatar>
                                    <div class="float-end text-start">
                                        <MudText Typo="Typo.subtitle1" Class="text-truncate">@chatItem.ChatName</MudText>
                                        <MudText Typo="Typo.subtitle2">@chatItem.LastChatTime.ToString("dd/MM/yyyy HH:mm:ss")</MudText>
                                    </div>
                                </MudButton>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.MoreVert"
                                               Color="Color.Default"
                                               OnClick="(await => ViewChatDetail(chatItem))"
                                               Class="moreChatButton" />
                            </CardHeaderActions>
                        </MudCardHeader>
                    </MudCard>
                }
            </div>
        </MudPaper>
    </MudItem>

    <MudItem md="8" sm="12" xs="12">
        <MudTextField @bind-Value="messageSearchKeyWord"
                      Placeholder="@_languageService["Search"]"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      Class="searchBoxStyle" />

        <div class="chat-container mt-2">
            <MudPaper Elevation="25">
                <MudToolBar>

                    @if (selectedChatGroup.ChatId != 0)
                    {
                        @if (!selectedChatGroup.IsGroupChat)
                        {
                            <MudButton Class="@($"textLeftButton")">
                                <MudBadge Color="selectedChatGroup.Member1vs1Display.UserInformation.IsOnline ? Color.Success : Color.Error"
                                          Overlap="true"
                                          Bordered="true"
                                          Class="mr-3 float-start">
                                    <MudAvatar>
                                        <MudImage Src="@selectedChatGroup.Member1vs1Display.UserInformation.AvatarImage"></MudImage>
                                    </MudAvatar>
                                </MudBadge>

                                <div class="float-end text-start">
                                    <MudText Typo="Typo.subtitle1" Class="text-truncate">@selectedChatGroup.Member1vs1Display.UserInformation.FullName</MudText>
                                    <MudText Typo="Typo.subtitle2">@selectedChatGroup.LastChatTime.ToString("dd/MM/yyyy HH:mm:ss")</MudText>
                                </div>
                            </MudButton>
                        }
                        else
                        {
                            <MudButton Class="@($"textLeftButton ")">
                                <MudAvatar Class="mr-3 float-start">
                                    <MudImage Src="@selectedChatGroup.GroupAvatar"></MudImage>
                                </MudAvatar>
                                <div class="float-end text-start">
                                    <MudText Typo="Typo.subtitle1" Class="text-truncate">@selectedChatGroup.ChatName</MudText>
                                    <MudText Typo="Typo.subtitle2">@selectedChatGroup.LastChatTime.ToString("dd/MM/yyyy HH:mm:ss")</MudText>
                                </div>
                            </MudButton>

                            <MudSpacer />

                            <MudAvatarGroup Max="1" Spacing="4" MaxColor="Color.Success" @onclick="(await => ViewChatDetail(selectedChatGroup))">
                                @foreach (var member in selectedChatGroup.ChatMemberList)
                                {
                                    <MudAvatar Size="Size.Medium">
                                        <MudImage Src="@member.UserInformation.AvatarImage" />
                                    </MudAvatar>
                                }
                            </MudAvatarGroup>
                        }
                    }
                </MudToolBar>
            </MudPaper>

            <div class="message-list" @ref="scrollChatMessageContainer" @onscroll="OnMessageChatScroll">

                @foreach (var message in messageList)
                {
                    if (message.CreatedId != userLogin.UserId)
                    {
                        <!-- Left Message -->
                        <div class="message-left">
                            <div class="avatar">
                                <img src="@message.CreateUser.AvatarImage" alt="@message.CreateUser.FullName">
                            </div>
                            <div class="message-container">
                                <div class="sender-name">@message.CreateUser.FullName</div>
                                <div class="message-content">
                                    @switch (@message.MessageType)
                                    {
                                        case TypeMessageConstant.Image:
                                            <img src="@message.Content" alt="@message.Content" class="message-image" />
                                            break;
                                        case TypeMessageConstant.File:
                                            <div class="message-text">@message.Content</div>
                                            break;
                                        case TypeMessageConstant.Video:
                                            <div class="message-text">@message.Content</div>
                                            break;
                                        default:
                                            <div class="message-text">@message.Content</div>
                                            break;
                                    }
                                    <div class="message-time">@message.CreatedDate.ToString("dd/MM/yyyy HH:mm:ss tt", CultureInfo.InvariantCulture)</div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <!-- Right Message -->
                        <div class="message-right">
                            <div class="message-content">
                                @switch (@message.MessageType)
                                {
                                    case TypeMessageConstant.Image:
                                        <img src="@message.Content" alt="@message.Content" class="message-image" />
                                        break;
                                    case TypeMessageConstant.File:
                                        <div class="message-text">@message.Content</div>
                                        break;
                                    case TypeMessageConstant.Video:
                                        <div class="message-text">@message.Content</div>
                                        break;
                                    default:
                                        <div class="message-text">@message.Content</div>
                                        break;
                                }
                                <div class="message-time">@message.CreatedDate.ToString("dd/MM/yyyy HH:mm:ss tt", CultureInfo.InvariantCulture)</div>
                            </div>
                            <div class="avatar">
                                <img src="@message.CreateUser.AvatarImage" alt="Avatar">
                            </div>
                        </div>
                    }
                }

            </div>

            @if (selectedMessageType != TypeMessageConstant.Text && !string.IsNullOrEmpty(messageInput))
            {
                <div class="imageMessagePreview">
                    @if (selectedMessageType == TypeMessageConstant.Image)
                    {
                        <MudIconButton Class="cancelImageMessageButton" Icon="@Icons.Material.Filled.Cancel" OnClick="ResetChat" />
                        <MudImage Src="@messageInput" />
                    }
                </div>
            }

            <div class="input-container">
                <InputFile id="messageInputFile" hidden OnChange="UploadFiles" accept=".pdf, .docx, .xlsx, .doc, .xls" />
                <InputFile id="messageInputImage" hidden OnChange="UploadFiles" accept="image/*" />
                <MudIconButton Icon="@Icons.Material.Filled.AttachFile"
                               OnClick="(await => AddFile())"
                               Class="mt-2" />
                <MudIconButton Icon="@Icons.Material.Filled.Image"
                               OnClick="(await => AddImage())"
                               Class="mt-2" />

                <input type="text"
                       @bind="messageInput"
                       readonly="@messageInputReadonly"
                       placeholder="@_languageService["TypeAMessage"]"
                       @onkeyup="SendMessageKeyUpAction"
                       class="input-style mt-2" />

                <MudIconButton Icon="@Icons.Material.Filled.Send"
                               OnClick="(await => SendMessage())"
                               Class="mt-2" />
            </div>
        </div>

    </MudItem>


</MudGrid>

<LoadingComponent IsLoading="isLoading" />

@code {
    private bool isLoading = false;
    private UserDto userLogin = new();
    private string messageSearchKeyWord = string.Empty;
    private bool isOnsearch = false;
    private List<ChatDto> groupChatList = new();
    private List<ChatDto> singleChatList = new();
    private List<MessageDto> messageList = new();
    private int singleChatPageIndex = 1;
    private int groupChatPageIndex = 1;
    private int messagePageIndex = 1;
    private int chatPageSize = 10;
    private int messagePageSize = 20;
    private HubConnection? hubConnection;
    private string messageInput = string.Empty;
    private long selectedChatId = 0;
    private bool messageInputReadonly = false;
    private int selectedMessageType = TypeMessageConstant.Text;
    private MemoryStream? memoryStream = null;
    private IBrowserFile? file = null;
    private long maxFileSize = 3 * 1024 * 1024; // 3 MB
    private ChatDto selectedChatGroup = new();
    private ChatDto hoverChatGroup = new();

    private ElementReference scrollSingleChatContainer;
    private ElementReference scrollGroupChatContainer;
    private ElementReference scrollChatMessageContainer;

    private async Task SendMessageKeyUpAction(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task AddImage()
    {
        selectedMessageType = TypeMessageConstant.Image;
        await _jSRuntime.InvokeVoidAsync("openFileDialog", "messageInputImage");
        StateHasChanged();
    }

    private async Task AddFile()
    {
        selectedMessageType = TypeMessageConstant.File;
        await _jSRuntime.InvokeVoidAsync("openFileDialog", "messageInputFile");
        StateHasChanged();
    }

    private async Task ViewChatDetail(ChatDto chatDto)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<GroupChatEditDialog>
                {
                    { x => x.ChatDto, chatDto },
                };
        var resultDialog = await _dialogService.ShowAsync<GroupChatEditDialog>(@_languageService["UpdateChatGroup"], parameters, options);
        var result = await resultDialog.Result;

        if (!result.Canceled)
        {
            var chatResult = (ChatDto)(result.Data);
            if (chatResult.ChatId == 0)
            {
                return;
            }
            await LoadGroupChatItem(chatResult);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadGroupChatItem(ChatDto chatDto)
    {
        try
        {
            if (selectedChatGroup.ChatId == chatDto.ChatId)
            {
                selectedChatGroup = chatDto;
            }
            int index = groupChatList.FindIndex(item => item.ChatId == chatDto.ChatId);
            if (index != -1)
            {
                groupChatList[index] = chatDto;
                return;
            }
            if (chatDto.ChatMemberList.Any(item => item.MemberId == userLogin.UserId))
            {
                groupChatList.Add(chatDto);
            }
        }
        finally
        {
            groupChatList = groupChatList.OrderByDescending(item => item.LastChatTime).ToList();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ChangeLastChatTime(MessageDto messageDto)
    {
        try
        {
            int index = singleChatList.FindIndex(item => item.ChatId == messageDto.ChatId);
            if (index != -1)
            {
                singleChatList[index].ChangeLastChatTime(messageDto.CreatedDate);
                singleChatList = singleChatList.OrderByDescending(item => item.LastChatTime).ToList();
                return;
            }
            index = groupChatList.FindIndex(item => item.ChatId == messageDto.ChatId);
            if (index != -1)
            {
                groupChatList[index].ChangeLastChatTime(messageDto.CreatedDate);
                groupChatList = groupChatList.OrderByDescending(item => item.LastChatTime).ToList();
            }
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task UploadFiles(InputFileChangeEventArgs eventArg)
    {
        file = eventArg.File;

        if (file.Size > maxFileSize)
        {
            var parameters = new DialogParameters<MessageDialog>
                {
                    { x => x.ContentText, @_languageService["MaxImageSizeIs3MB"] },
                    { x => x.ButtonText, "Ok" },
                    { x => x.Color, Color.Warning }
                };

            var resultDialog = await _dialogService.ShowAsync<MessageDialog>(@_languageService["Warning"], parameters);
            return;
        }

        memoryStream = new MemoryStream();
        await file.OpenReadStream(maxFileSize).CopyToAsync(memoryStream);
        memoryStream.Seek(0, SeekOrigin.Begin); // Reset stream position

        var fileBytes = memoryStream.ToArray();

        // Create Blob URL for the file
        var fileUrl = await _jsRuntime.InvokeAsync<string>("createObjectURLFromArray", fileBytes);
        messageInput = fileUrl;
        messageInputReadonly = true;
        StateHasChanged();
    }

    private async Task UploadFileToServer()
    {
        if (file != null && memoryStream != null)
        {
            var formFile = new FormFile(memoryStream, 0, memoryStream.Length, file.Name, file.Name)
                {
                    Headers = new HeaderDictionary(),
                    ContentType = file.ContentType
                };

            var response = await _uploadImageService.UploadImageWithoutAuthorizeAsync(formFile);
            if (response != null)
            {
                messageInput = response.Data;
            }
        }
    }

    private async Task SendMessage()
    {
        try
        {
            if (selectedMessageType != TypeMessageConstant.Text)
            {
                // upload file to server and get file link
                await UploadFileToServer();
            }
            if (selectedChatId == 0 || string.IsNullOrEmpty(messageInput))
            {
                return;
            }

            var request = new SendMessageRequest()
                {
                    ChatId = selectedChatId,
                    Content = messageInput,
                    MessageType = selectedMessageType
                };
            var sendMessageResponse = await _chatService.SendMessageAsync(request);
            ResetChat();
            var messageDto = sendMessageResponse?.Data ?? new();

            if (messageDto == null || messageDto.MessageId == 0 || messageList.Any(item => item.MessageId == messageDto.MessageId))
            {
                return;
            }

            messageList.Add(messageDto);
            messageList = messageList.OrderByDescending(item => item.CreatedDate).ToList();
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private void ResetChat()
    {
        messageInput = string.Empty;
        selectedMessageType = TypeMessageConstant.Text;
        messageInputReadonly = false;
        file = null;
        memoryStream = null;
        StateHasChanged();
    }

    private async Task OnMessageChatScroll()
    {
        var scrollTop = await _jSRuntime.InvokeAsync<double>("blazorGetScrollTop", scrollChatMessageContainer);
        var scrollHeight = await _jSRuntime.InvokeAsync<double>("blazorGetScrollHeight", scrollChatMessageContainer);
        var clientHeight = await _jSRuntime.InvokeAsync<double>("blazorGetClientHeight", scrollChatMessageContainer);

        if (-(scrollTop) + clientHeight >= scrollHeight - 50 && !isOnsearch)
        {
            await LoadChatMessage();
        }
    }

    private async Task OnSingleChatScroll()
    {
        var scrollTop = await _jSRuntime.InvokeAsync<double>("blazorGetScrollTop", scrollSingleChatContainer);
        var scrollHeight = await _jSRuntime.InvokeAsync<double>("blazorGetScrollHeight", scrollSingleChatContainer);
        var clientHeight = await _jSRuntime.InvokeAsync<double>("blazorGetClientHeight", scrollSingleChatContainer);

        if (scrollTop + clientHeight >= scrollHeight - 50 && !isOnsearch)
        {
            await LoadSingleChatList();
        }
    }

    private async Task OnGroupChatScroll()
    {
        var scrollTop = await _jSRuntime.InvokeAsync<double>("blazorGetScrollTop", scrollGroupChatContainer);
        var scrollHeight = await _jSRuntime.InvokeAsync<double>("blazorGetScrollHeight", scrollGroupChatContainer);
        var clientHeight = await _jSRuntime.InvokeAsync<double>("blazorGetClientHeight", scrollGroupChatContainer);

        if (scrollTop + clientHeight >= scrollHeight - 50 && !isOnsearch)
        {
            await LoadGroupChatList();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var dimension = await _jSRuntime.InvokeAsync<WindowDimensions>("getWindowSize");
        var heightContainer = dimension.Height - dimension.FormHeight - dimension.ToolbarHeight;
        var heightGrid = (heightContainer - 275) / 2;
        var heightMessageChat = heightContainer - 255;
        await _jSRuntime.InvokeVoidAsync("blazorSetElementHeight", scrollSingleChatContainer, heightGrid);
        await _jSRuntime.InvokeVoidAsync("blazorSetElementHeight", scrollGroupChatContainer, heightGrid);
        await _jSRuntime.InvokeVoidAsync("blazorSetElementHeight", scrollChatMessageContainer, heightMessageChat);
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            StateHasChanged();

            await _languageService.LoadLanguage();
            await RegisterSocketClient();
            userLogin = await _localStorage.GetItemAsync<UserDto>(KeyConstant.UserLogin) ?? new();
            singleChatPageIndex = 1;
            groupChatPageIndex = 1;
            await LoadSingleChatList();
            await LoadGroupChatList();
            selectedChatGroup = singleChatList.Any() ? singleChatList.First() : groupChatList.Any() ? groupChatList.First() : new();
            selectedChatId = selectedChatGroup.ChatId;
            messagePageIndex = 1;
            await LoadChatMessage();
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OpenAddNewChatDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<ChatMemberDialog>
                {
                    { x => x.IsAddNew, true },
                };
        var dialog = await _dialogService.ShowAsync<ChatMemberDialog>(_languageService["NewChat"], parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var chatId = (long)(result.Data);
            if (chatId == 0)
            {
                return;
            }
            selectedChatId = chatId;
            messagePageIndex = 1;
            singleChatPageIndex = 1;
            groupChatPageIndex = 1;
            await LoadChatMessage();
            await LoadSingleChatList();
            await LoadGroupChatList();
        }
    }

    private async Task LoadGroupChatList()
    {
        if (isOnsearch)
        {
            return;
        }
        try
        {
            isOnsearch = true;
            GetListChatGroupByMemberRequest request = new();
            request.PageIndex = groupChatPageIndex;
            request.PageSize = chatPageSize;
            request.IsGroupChat = true;
            request.MemberId = userLogin.UserId;
            var response = await _chatService.GetListChatGroupByMemberAsync(request);
            var resultData = response?.Data ?? new();
            if (!resultData.Any())
            {
                return;
            }
            var resultChatIds = resultData.Select(dt => dt.ChatId).ToHashSet();

            groupChatList = groupChatList.Where(item => !resultChatIds.Contains(item.ChatId))
                                         .Concat(resultData)
                                         .OrderByDescending(item => item.LastChatTime)
                                         .ToList();
            groupChatPageIndex++;
            StateHasChanged();
        }
        finally
        {
            isOnsearch = false;
        }
    }

    private async Task LoadSingleChatList()
    {
        if (isOnsearch)
        {
            return;
        }
        try
        {
            isOnsearch = true;
            GetListChatGroupByMemberRequest request = new();
            request.PageIndex = singleChatPageIndex;
            request.PageSize = chatPageSize;
            request.IsGroupChat = false;
            request.MemberId = userLogin.UserId;
            var response = await _chatService.GetListChatGroupByMemberAsync(request);
            var resultData = response?.Data ?? new();
            if (!resultData.Any())
            {
                return;
            }
            var resultChatIds = resultData.Select(dt => dt.ChatId).ToHashSet();

            singleChatList = singleChatList.Where(item => !resultChatIds.Contains(item.ChatId))
                                           .Concat(resultData)
                                           .OrderByDescending(item => item.LastChatTime)
                                           .ToList();
            singleChatPageIndex++;
            foreach (var item in singleChatList)
            {
                item.Set1vs1Member(userLogin.UserId);
            }
            StateHasChanged();
        }
        finally
        {
            isOnsearch = false;
        }
    }

    private async Task ChatGroupClick(ChatDto chatDto)
    {
        selectedChatGroup = chatDto;
        messageList.Clear();
        selectedChatId = chatDto.ChatId;
        messagePageIndex = 1;
        StateHasChanged();
        await LoadChatMessage();
    }

    private async Task ChatGroupHover(ChatDto chatDto)
    {
        hoverChatGroup = chatDto;
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadChatMessage()
    {
        if (isOnsearch)
        {
            return;
        }
        try
        {
            isOnsearch = true;
            if (selectedChatId == 0)
            {
                return;
            }
            GetMessageListRequest request = new();
            request.PageIndex = messagePageIndex;
            request.PageSize = messagePageSize;
            request.ChatId = selectedChatId;
            request.KeyWord = messageSearchKeyWord;
            var response = await _chatService.GetMessageListAsync(request);
            var resultData = response?.Data ?? new();
            if (!resultData.Any() && messagePageIndex != 1)
            {
                return;
            }
            var resultMessageIds = resultData.Select(dt => dt.MessageId).ToHashSet();

            messageList = messageList.Where(item => !resultMessageIds.Contains(item.MessageId))
                                     .Concat(resultData)
                                     .OrderByDescending(item => item.CreatedDate)
                                     .ToList();
            messagePageIndex++;
        }
        finally
        {
            isOnsearch = false;
            StateHasChanged();
        }
    }

    private async Task RegisterSocketClient()
    {
        string hubUrl = _configuration["SignalR:HubUrl"] ?? string.Empty;

        hubConnection = new HubConnectionBuilder()
        .WithUrl(hubUrl)
        .Build();

        hubConnection.On<string>(RealtimeConstant.UserStatus, async (message) =>
        {
            var userSocketList = JsonSerializer.Deserialize<List<UserDto>>(message);
            if (userSocketList == null || !userSocketList.Any())
            {
                return;
            }
            var userDictionary = userSocketList.ToDictionary(u => u.UserId);
            var chatsToUpdate = singleChatList.Where(chat => userDictionary.ContainsKey(chat.Member1vs1Display.UserInformation.UserId)).ToList();

            if (!chatsToUpdate.Any())
            {
                return;
            }
            foreach (var chat in chatsToUpdate)
            {
                var updateUser = userDictionary[chat.Member1vs1Display.UserInformation.UserId];
                chat.ChangeUserMember1vs1Display(updateUser);
            }
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>(RealtimeConstant.ReceiveMessage, async (message) =>
        {
            var messageSocket = JsonSerializer.Deserialize<MessageDto>(message);
            if (messageSocket == null || messageSocket.MessageId == 0 || messageList.Any(item => item.MessageId == messageSocket.MessageId) || messageSocket.ChatId != selectedChatId)
            {
                return;
            }
            messageList.Add(messageSocket);
            messageList = messageList.OrderByDescending(item => item.CreatedDate).ToList();
            await ChangeLastChatTime(messageSocket);
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>(RealtimeConstant.ChatGroupUpdate, async (message) =>
        {
            var chatSocket = JsonSerializer.Deserialize<ChatDto>(message);
            if (chatSocket == null || chatSocket.ChatId == 0)
            {
                return;
            }
            await LoadGroupChatItem(chatSocket);
            await InvokeAsync(StateHasChanged);
        });

        try
        {
            await hubConnection.StartAsync();
        }
        catch (Exception)
        {
            throw;
        }
    }
}